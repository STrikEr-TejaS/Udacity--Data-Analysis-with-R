tweets$Negative = as.factor(tweets$Avg <= -1)
table(tweets$Negative)
library(tm)
library(SnowballC)
corpus = Corpus(VectorSource(tweets$Tweet))
str(corpus)
corpus
corpus = Corpus(VectorSource(tweets$Tweet))
corpus
cp = Corpus(VectorSource(tweets$Tweet))
cp
cp[1]
cp[[1]
]
corpus = tm_map(corpus, tolower)
corpus
corpus = tm_map(corpus, PlainTextDocument)
corpus
corpus[[1]]
stopwords("english")[1:10]
corpus = tm_map(corpus, removeWords, c("apple, stopwords("english")))
corpus = tm_map(corpus, removeWords, c("apple", stopwords("english")))
corpus[[1]]
corpus = tm_map(corpus, stemDocument)
corpus[[1]]
corpus = tm_map(corpus, removePunctuation)
corpus[[1]]
corpus = tm_map(corpus, removeWords, c("apple", stopwords("english")))
corpus = tm_map(corpus, stemDocument)
corpus
freq = DocumentTermMatrix(corpus)
freq
inspect(freq[1000:1005, 505:515])
corpus = tm_map(corpus, PlainTextDocument)
corpus
setwd(readClipboard())
airlines = read.csv("airline_delays.csv")
str(airlines)
table(airlines$carrier)
sum(airlines$arr_flights)
summary(airlines)
str(airlines)
sum(airlines$arr_flights)
summary(airlines)
air2 = subset(airlines, carrier_name != NA)
str(air2)
summary(air2)
air2 = subset(airlines, carrier_name != "")
summary(air2)
air2 = airlines[is.na(airlines$arr_flights) ==0,]
summary(air2)
airlines = airlines[is.na(airlines$arr_flights) ==0,]
tapply(airlines$arr_flights, airlines$carrier_name, sum)
sort(tapply(airlines$arr_flights, airlines$carrier_name, sum))
tail(sort(tapply(airlines$arr_flights, airlines$carrier_name, sum)))
tail(sort(tapply(airlines$arr_flights, airlines$carrier_name, sum)))
str(airlines)
air2014 = airlines[airline$year==2014,]
air2014 = airlines[airlines$year==2014,]
tail(sort(tapply(air2014$arr_flights, airlines$carrier_name, sum)))
tail(sort(tapply(air2014$arr_flights, air2014$carrier_name, sum)))
tail(sort(tapply(airlines$arr_flights, airlines$carrier_name, sum)))
str(tail(sort(tapply(airlines$arr_flights, airlines$carrier_name, sum))))
tail(sort(tapply(airlines$arr_flights, airlines$carrier_name, sum)))[,2]
tail(sort(tapply(airlines$arr_flights, airlines$carrier_name, sum)))[2]
tail(sort(tapply(airlines$arr_flights, airlines$carrier_name, sum)))[2,]
tail(sort(tapply(airlines$arr_flights, airlines$carrier_name, sum)))[1]
str(tail(sort(tapply(airlines$arr_flights, airlines$carrier_name, sum)))[1])
tail(sort(tapply(airlines$arr_flights, airlines$carrier_name, sum)))$name
tail(sort(tapply(airlines$arr_flights, airlines$carrier_name, sum)))$num
str(tail(sort(tapply(airlines$arr_flights, airlines$carrier_name, sum)))[1])$Named
data.frame(tail(sort(tapply(airlines$arr_flights, airlines$carrier_name, sum))))
data.frame(tail(sort(tapply(airlines$arr_flights, airlines$carrier_name, sum))))[,1]
str(data.frame(tail(sort(tapply(airlines$arr_flights, airlines$carrier_name, sum)))))
top6 = tail(sort(tapply(airlines$arr_flights, airlines$carrier_name, sum)))
top6
str(top6)
typeof(top6)
top6.1
top6.
top6[1]
top6[1][1]
top6[1][1,]
top6[1][2]
top6[1,1]
labels(top6)
levels(top6)
colnames(top6)
labels(top6)
str(labels(top6))
top6.carrier_name = labels(top6)
top6_airlines = airlines[airlines$carrier_name = top6.carrier_name,]
top6_airlines = airlines[airlines$carrier_name == top6.carrier_name,]
top6_airlines
top6_airlines = airlines[airlines$carrier_name %in% top6.carrier_name,]
top6_airlines
top6_airlines = airlines[top6.carrier_name %in% airlines$carrier_name ,]
top6.carrier_name %in% airlines$carrier_name
top6.carrier_name
top6.carrier_name %in% airlines$carrier_name
is.element(top6.carrier_name, airlines$carrier_name)
top6.carrier_name = as.factor(top6.carrier_name)
typeof(top6.carrier_name)
top6.carrier_name = as.vector(top6.carrier_name)
is.element(top6.carrier_name, airlines$carrier_name)
top6.carrier_name
top6.carrier_name[1]
top6.carrier_name[2]
top6.carrier_name[1,1]
top6.carrier_name[3]
top6.carrier_name[1]
typeof(top6.carrier_name)
top6.carrier_name = as.vector(top6.carrier_name)
typeof(top6.carrier_name)
labels(top6.carrier_name)
top6.carrier_name[[1]]
top6.carrier_name = top6.carrier_name[[1]]
top6.carrier_name[[1]]
top6.carrier_name
is.element(top6.carrier_name, airlines$carrier_name)
top6_airlines = airlines[top6.carrier_name %in% airlines$carrier_name ,]
top6.carrier_name %in% airlines$carrier_name
str(top6_airlines)
airlines$carrier_name %in% top6.carrier_name
top6_airlines = airlines[airlines$carrier_name %in% top6.carrier_name  ,]
str(top6_airlines)
table(top6_airlines$carrier_name)
write.csv(top6_airlines, "Top6Carriers.csv", row.names=TRUE)
write.csv(top6_airlines, "Top6Carriers.tsv", row.names=FALSE)
write.csv(top6_airlines, "Top6Carriers.csv", row.names=FALSE)
str(top6_airlines)
str(airlines)
airlines = read.csv("airlines_delay.csv")
airlines = read.csv("airline_delays.csv")
rm(air2)
rm(air2014)
str(airlines)
airlines = read.csv("airlines.csv")
str(airlines)
airlines = read.csv("airlines.csv", check.names = FALSE)
str(airlines)
airlines = read.csv("airlines.csv")
airlines = airlines[is.na(airlines$arr_flights) ==0,]
colnames(airlines$X.arr_delay) = "arr_delay"
levels(airlines$X.arr_delay)
labels(airlines$X.arr_delay)
names(airlines$X.arr_delay)
colnames(airlines)
colnames(airlines)[10]
colnames(airlines)[10]="X.weather_ct"
colnames(airlines)[10]
colnames(airlines)[10]="weather_ct"
colnames(airlines)[10]
colnames(airlines)[10]="weather_ct"
colnames(airlines)[16]="arr_delay"
colnames(airlines)[10]="carrier_delay"
airlines = airlines[is.na(airlines$arr_flights) ==0,]
top6 = tail(sort(tapply(airlines$arr_flights, airlines$carrier_name, sum)))
top6.carrier_name = labels(top6)
top6.carrier_name = top6.carrier_name[[1]]
top6_airlines = airlines[airlines$carrier_name %in% top6.carrier_name  ,]
write.csv(top6_airlines, "Top6Carriers.csv", row.names=FALSE)
```
write.csv(top6_airlines, "Top6Carriers.csv", row.names=FALSE)
colnames(airlines)[17]="carrier_delay"
colnames(airlines)
top6 = tail(sort(tapply(airlines$arr_flights, airlines$carrier_name, sum)))
top6.carrier_name = labels(top6)
top6.carrier_name = top6.carrier_name[[1]]
top6_airlines = airlines[airlines$carrier_name %in% top6.carrier_name  ,]
top6_airlines$X.month = NULL
top6_airlines$X = NULL
write.csv(top6_airlines, "Top6Carriers.csv", row.names=FALSE)
tapply(top6_airlines$carrier_delay, top6_airlines$year, average)
tapply(top6_airlines$carrier_delay, top6_airlines$year, mean)
aggregate(top6_airlines, by = list(year,carrier_name), FUN=mean)
aggregate(top6_airlines, by = list(top6_airlines$year,top6_airlines$carrier_name), FUN=mean)
aggregate(top6_airlines, by = list(top6_airlines$year,top6_airlines$carrier_name), FUN=mean, na.rm=TRUE)
aggregated_data = aggregate(top6_airlines, by = list(top6_airlines$year,top6_airlines$carrier_name), FUN=mean, na.rm=TRUE)
warnings()
str(aggregated_data)
table(aggregated_data$Group.2)
top6_airlines$carrier_name = factor(top6_airlines$carrier_name)
aggregated_data = aggregate(top6_airlines, by = list(top6_airlines$year,top6_airlines$carrier_name), FUN=mean, na.rm=TRUE)
table(aggregated_data$Group.2)
str(aggregated_data)
str(top6_)
str(top6_airlines)
group_by(top6_airlines)
install.packages("dplyr")
library(dplyr)
group_by(top6_airlines, year)
group_by(top6_airlines, c(year, carrier_name)
)
ef <- top6_airlines %>%
group_by(year, carrier_name) %>%
summarize(arrivals = sum(arr_flights),
delayed = sum(arr_del15),
cancelled = sum(arr_cancelled),
diverted = sum(arr_diverted)) %>%
transform(on_time = 1 - delayed/arrivals)
str(top6_airlines)
str(factor(top6_airlines))
str(factor(top6_airlines$airport))
ef <- top6_airlines %>%
group_by(year, carrier_name)
str(ef)
ef <- top6_airlines %>%
group_by(year, carrier_name) %>%
summarize(arrivals = sum(arr_flights),
delayed = sum(arr_del15),
cancelled = sum(arr_cancelled),
diverted = sum(arr_diverted))
ef <- top6_airlines %>%
group_by(year, carrier_name) %>%
summarize(arrivals = sum(arr_flights))
str(ef)
irlines = read.csv("airlines.csv")
airlines = airlines[is.na(airlines$arr_flights) ==0,]
colnames(airlines)[10]="weather_ct"
colnames(airlines)[16]="arr_delay"
colnames(airlines)[17]="carrier_delay"
airlines = read.csv("airlines.csv")
airlines = airlines[is.na(airlines$arr_flights) ==0,]
colnames(airlines)[10]="weather_ct"
colnames(airlines)[16]="arr_delay"
colnames(airlines)[17]="carrier_delay"
str(airlines)
colnames(airlines)[2]="month"
str(airlines)
top6 = tail(sort(tapply(airlines$arr_flights, airlines$carrier_name, sum)))
top6.carrier_name = labels(top6)
top6.carrier_name = top6.carrier_name[[1]]
top6_airlines = airlines[airlines$carrier_name %in% top6.carrier_name  ,]
top6_airlines$X = NULL
top6_airlines$carrier_name = factor(top6_airlines$carrier_name)
ef <- top6_airlines %>%
group_by(year, carrier_name) %>%
summarize(arrivals = sum(arr_flights),
delayed = sum(arr_del15),
cancelled = sum(arr_cancelled),
diverted = sum(arr_diverted)) %>%
transform(on_time = 1 - delayed/arrivals)
str(ef)
str(aggregated_data)
top(aggregated_data)
head(aggregated_data)
aggregated_data = aggregate(top6_airlines, by = list(top6_airlines$year,top6_airlines$carrier_name), FUN=sum, na.rm=TRUE)
aggregated_data = aggregate(top6_airlines, by = list(top6_airlines$year,top6_airlines$carrier_name), FUN=mean, na.rm=TRUE)
str(top6_airlines)
aggregated_data = aggregate(top6_airlines[,7:ncol(top6_airlines)], by = list(top6_airlines$year,top6_airlines$carrier_name), FUN=sum, na.rm=TRUE)
str(aggregated_data)
head(aggregated_data)
aggregated_data = aggregate(top6_airlines[,7:ncol(top6_airlines)], by = list(top6_airlines$year,top6_airlines$carrier_name), FUN=sum, na.rm=TRUE)
str(aggregated_data)
colnames(aggregated_data)[1] = "year"
colnames(aggregated_data)[2] = "carrier_name"
aggregated_data$avg_arr_del15 = aggregated_data$arr_del15/aggregated_data$arr_flights
aggregated_data$avg_carrier_ct = aggregated_data$carrier_ct/aggregated_data$arr_flights
aggregated_data$avg_arr_cancelled = aggregated_data$arr_cancelled/aggregated_data$arr_flights
aggregated_data$avg_arr_delay = aggregated_data$arr_delay/aggregated_data$arr_flights
aggregated_data$avg_carrier_delay = aggregated_data$carrier_delay/aggregated_data$arr_flights
str(aggregated_data)
write.csv(aggregated_data, "final_airlines.csv", row.names=FALSE)
aggregated_data$avg_arr_del15 = 100 * aggregated_data$arr_del15/aggregated_data$arr_flights
aggregated_data$avg_carrier_ct = 100 * aggregated_data$carrier_ct/aggregated_data$arr_flights
aggregated_data$avg_arr_cancelled = 100 * aggregated_data$arr_cancelled/aggregated_data$arr_flights
aggregated_data$avg_arr_delay = aggregated_data$arr_delay/aggregated_data$arr_flights
aggregated_data$avg_carrier_delay = aggregated_data$carrier_delay/aggregated_data$arr_flights
write.csv(aggregated_data, "final_airlines.csv", row.names=FALSE)
str(aggregated_data)
write.csv(aggregated_data, "final_airlines.csv", row.names=FALSE)
write.csv(aggregated_data, "summary_airlines.csv", row.names=FALSE)
head(aggregated_data)
str(aggregated_data)
aggregated_data$avg_ontime = 100 - aggregated_data$avg_arr_del15
write.csv(aggregated_data, "summary_airlines.csv", row.names=FALSE)
factor(top6_airlines$carrier_name)
levels(top6_airlines$carrier_name)
library(knitr)
library(markdown)
#transform the .Rmd to a markdown (.md) file.
knit('FinalProject_Airlines.Rmd')
file.rename(from="scripts/FinalProject_Airlines.md",
to="README.md")
file.rename(from="FinalProject_Airlines.md",
to="README.md")
install.packages("knitr")
install.packages("knitr")
file.rename(from="FinalProject_Airlines.md",
to="README.md")
knit('FinalProject_Airlines.Rmd')
file.rename(from="FinalProject_Airlines.md",
to="README.md")
knit('FinalProject_Airlines.Rmd')
file.rename(from="FinalProject_Airlines.md",
to="README.md")
knit('FinalProject_Airlines.Rmd')
file.rename(from="FinalProject_Airlines.md",
to="README.md")
rm(list = ls())
wine = read.csv("wineQualityWhites.csv")
setwd(readClipboard())
require(ggplot2)
require(GGally)
require(rpart)
require(rpart.plot)
wine = read.csv("wineQualityWhites.csv")
str(wine)
ggplot(data = wine, aes(x = wine$quality)) +
geom_hist()
ggplot(data = wine, aes(x = wine$quality)) +
geom_histogram()
install.packages("gridExtra")
ggplot(data = wine) +
geom_histogram(aes(x=wine$fixed.acidity)) +
geom_histogram(aes(x=wine$volatile.acidity))
g1 = ggplot(data = wine) +
geom_histogram(aes(x=wine$fixed.acidity))
g2 =   ggplot(data = wine) +
geom_histogram(aes(x=wine$volatile.acidity))
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
print(g1, vp = vplayout(1, 1:2))
print(g2, vp = vplayout(2, 1))
dev.off()
require(grid)
g1 = ggplot(data = wine) +
geom_histogram(aes(x=wine$fixed.acidity))
g2 =   ggplot(data = wine) +
geom_histogram(aes(x=wine$volatile.acidity))
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
print(g1, vp = vplayout(1, 1:2))
print(g2, vp = vplayout(2, 1))
dev.off()
```
print(g1, vp = vplayout(1, 1))
print(g2, vp = vplayout(2, 1))
print(g1, vp = vplayout(1, 1))
print(g2, vp = vplayout(2, 1))
dev.off()
print(g1, vp = vplayout(1, 1))
print(g2, vp = vplayout(2, 1))
print(g1, vp = vplayout(1, 1))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
g1 = ggplot(data = wine) +
geom_histogram(aes(x=wine$fixed.acidity))
g2 =   ggplot(data = wine) +
geom_histogram(aes(x=wine$volatile.acidity))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
g1 = ggplot(data = wine) +
geom_histogram(aes(x=wine$fixed.acidity))
g2 =   ggplot(data = wine) +
geom_histogram(aes(x=wine$volatile.acidity))
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
print(g1, vp = vplayout(1, 1))
print(g2, vp = vplayout(2, 1))
print(g1, vp = vplayout(1, 1))
print(g2, vp = vplayout(2, 2))
layout(matrix(c(1:4), 2, 2, byrow = TRUE))
g1 = ggplot(data = wine) +
geom_histogram(aes(x=wine$fixed.acidity))
g2 =   ggplot(data = wine) +
geom_histogram(aes(x=wine$volatile.acidity))
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
print(g1, vp = vplayout(1, 1))
print(g2, vp = vplayout(2, 2))
require(grid)
layout(matrix(c(1:4), 2, 2, byrow = TRUE))
g1 = ggplot(data = wine) +
geom_histogram(aes(x=wine$fixed.acidity))
g2 =   ggplot(data = wine) +
geom_histogram(aes(x=wine$volatile.acidity))
grid.newpage()
print(g1, vp = vplayout(1, 1))
print(g2, vp = vplayout(2, 2))
g1 = ggplot(data = wine) +
geom_histogram(aes(x=wine$fixed.acidity))
g2 =   ggplot(data = wine) +
geom_histogram(aes(x=wine$volatile.acidity))
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
print(g1, vp = vplayout(1, 1))
print(g2, vp = vplayout(2, 2))
g1 = ggplot(data = wine) +
geom_histogram(aes(x=wine$fixed.acidity))
g2 =   ggplot(data = wine) +
geom_histogram(aes(x=wine$volatile.acidity))
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
viewport(layout.pos.row = x, layout.pos.col = y)
print(g1, vp = vplayout(1, 1))
print(g2, vp = vplayout(2, 2))
g1 = ggplot(data = wine) +
geom_histogram(aes(x=wine$fixed.acidity))
g2 =   ggplot(data = wine) +
geom_histogram(aes(x=wine$volatile.acidity))
grid.newpage()
pushViewport(viewport(layout = grid.layout(3, 2)))
viewport(layout.pos.row = x, layout.pos.col = y)
print(g1, vp = vplayout(1, 1))
print(g2, vp = vplayout(2, 2))
g1 = ggplot(data = wine) +
geom_histogram(aes(x=wine$fixed.acidity))
g2 =   ggplot(data = wine) +
geom_histogram(aes(x=wine$volatile.acidity))
grid.newpage()
pushViewport(viewport(layout = grid.layout(3, 3)))
print(g1, vp = vplayout(1, 1))
print(g2, vp = vplayout(2, 2))
g1 = ggplot(data = wine, aes(x=wine$fixed.acidity)) +
geom_histogram()
g2 = ggplot(data = wine, aes(x=wine$volatile.acidity)) +
geom_histogram()
g3 = ggplot(data = wine, aes(x=wine$citric.acid)) +
geom_histogram()
g3 = ggplot(data = wine, aes(x=wine$pH)) +
geom_histogram()
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
print(g1, vp = vplayout(1, 1))
print(g2, vp = vplayout(1, 2))
print(g3, vp = vplayout(2, 1))
print(g4, vp = vplayout(2, 2))
```{r echo=FALSE, warning=FALSE}
g1 = ggplot(data = wine, aes(x=wine$fixed.acidity)) +
geom_histogram()
g2 = ggplot(data = wine, aes(x=wine$volatile.acidity)) +
geom_histogram()
g3 = ggplot(data = wine, aes(x=wine$citric.acid)) +
geom_histogram()
g4 = ggplot(data = wine, aes(x=wine$pH)) +
geom_histogram()
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
print(g1, vp = vplayout(1, 1))
print(g2, vp = vplayout(1, 2))
print(g3, vp = vplayout(2, 1))
print(g4, vp = vplayout(2, 2))
str(wine)
hist(wine$residual.sugar)
hist(wine$density)
```{r echo=FALSE, warning=FALSE}
g1 = ggplot(data = wine, aes(x=wine$chlorides)) +
geom_histogram()
g2 = ggplot(data = wine, aes(x=wine$residual.sugar)) +
geom_histogram()
g3 = ggplot(data = wine, aes(x=wine$density)) +
geom_histogram()
g4 = ggplot(data = wine, aes(x=wine$alcohol)) +
geom_histogram()
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
print(g1, vp = vplayout(1, 1))
print(g2, vp = vplayout(1, 2))
print(g3, vp = vplayout(2, 1))
print(g4, vp = vplayout(2, 2))
```
ggplot(data= wine, aes(x = wine$alcohol, y = wine$pH, color = rating)) +
geom_point()
ggplot(data= wine, aes(x = wine$alcohol, y = wine$pH, color = quality)) +
geom_point()
ggplot(data = wine, aes(x = wine$rating)) +
geom_bar()
wine$rating[5 >= wine$quality ] = "Poor"
wine$rating[5< wine$quality & wine$quality < 7] = "Good"
wine$rating[7<= wine$quality ] = "Great"
wine$rating = as.factor(wine$rating)
ggplot(data = wine, aes(x = wine$rating)) +
geom_bar()
wine$rating[5 > wine$quality ] = "Poor"
wine$rating[5<= wine$quality & wine$quality < 7] = "Good"
wine$rating[7<= wine$quality ] = "Great"
wine$rating = as.factor(wine$rating)
ggplot(data = wine, aes(x = wine$rating)) +
geom_bar()
ggplot(data= wine, aes(x = wine$alcohol, y = wine$pH, color = rating)) +
geom_point()
ggplot(data = wine, aes(x = wine$alcohol, y = wine$density, color = rating)) +
geom_point()
wine = read.csv("\\data\\wineQualityWhites.csv")
wine = read.csv(".\\data\\wineQualityWhites.csv")
getwd)
getwd()
setwd(readClipboard())
wine = read.csv("https://raw.githubusercontent.com/keymanesh/Udacity--Data-Analysis-with-R/master/data/wineQualityWhites.csv")
```{r include=FALSE}
require(ggplot2)
require(GGally)
require(rpart)
require(rpart.plot)
require(grid)
require(RCurl)
url =  getURL("https://raw.github.com/aronlindberg/latent_growth_classes/master/LGC_data.csv")
wine = read.csv(test = url)
library(RCurl)
url =  getURL("https://raw.github.com/aronlindberg/latent_growth_classes/master/LGC_data.csv")
url =  getURL("https://raw.github.com/aronlindberg/latent_growth_classes/master/LGC_data.csv")
url =  getURL("https://raw.github.com/aronlindberg/latent_growth_classes/master/LGC_data.csv")
